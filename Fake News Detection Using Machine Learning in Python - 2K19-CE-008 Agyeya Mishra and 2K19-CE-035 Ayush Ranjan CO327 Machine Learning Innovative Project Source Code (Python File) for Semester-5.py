# -*- coding: utf-8 -*-
"""Fake News Detection Using Machine Learning in Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1edFzmXBy_aeOogATMUu3EqPm3M5KwEdv

## Fake News Detection Using Machine Learning

#### Author - Agyeya Mishra and Ayush Ranjan
"""

from google.colab import files
uploaded = files.upload()

# Importing all the necessary libraries

import numpy as np # python library used for working with arrays
import pandas as pd # python library used for data analysis
import itertools # used for implementing a number of iterator building blocks
from sklearn.model_selection import train_test_split # used for splitting the dataset
from sklearn.feature_extraction.text import TfidfVectorizer # this will be used to train our model
from sklearn.linear_model import PassiveAggressiveClassifier # used for large scale learning
from sklearn.metrics import accuracy_score, confusion_matrix # used for performance metrics

# Now, let’s read the data into a DataFrame, and get the shape of the data and the first 5 records.

import io
df = pd.read_csv(io.BytesIO(uploaded['news.csv']))
# Dataset is now stored in a Pandas Dataframe

# Getting the shape and head
df.shape
df.head()

# Now, we try to get the labels from the DataFrame

labels = df.label
labels.head()

# Splitting the dataset into training and testing sets

x_train, x_test, y_train, y_test = train_test_split(df['text'], labels, test_size = 0.2, random_state = 7)

"""Here, we initialize a TfidfVectorizer with stop words from the English language and a maximum document frequency of 0.7 (terms with a higher document frequency will be discarded). Stop words are the most common words in a language that are to be filtered out before processing the natural language data. And a TfidfVectorizer turns a collection of raw documents into a matrix of TF-IDF features."""

# Now, we fit and transform the vectorizer on the train set, and transform the vectorizer on the test set

# Initialize a TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words = 'english', max_df = 0.7)

# Fit and tranform train set, transform test set
tfidf_train = tfidf_vectorizer.fit_transform(x_train) 
tfidf_test = tfidf_vectorizer.transform(x_test)

"""Next, we’ll initialize a PassiveAggressiveClassifier. We’ll fit this on tfidf_train and y_train.

Then, we’ll predict on the test set from the TfidfVectorizer and calculate the accuracy with accuracy_score() from sklearn.metrics.
"""

# Initialize a PassiveAggressiveClassifier
pac = PassiveAggressiveClassifier(max_iter = 50)
pac.fit(tfidf_train, y_train)

# Predict on the test set and calculate accuracy
y_pred = pac.predict(tfidf_test)
score = accuracy_score(y_test, y_pred)
print(f'Accuracy: {round(score*100,2)}%')

"""Finally, let’s print out a confusion matrix to gain insight into the number of false and true negatives and positives."""

# Building confusion matrix
confusion_matrix(y_test, y_pred, labels = ['FAKE','REAL'])